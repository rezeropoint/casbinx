name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: '1.21'

jobs:
  # 代码质量检查
  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Run go fmt
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "以下文件需要格式化:"
          gofmt -s -l .
          exit 1
        fi

    - name: Run go vet
      run: go vet ./...

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m

  # 集成测试
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: lint

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: casbinx_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6380:6379

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Wait for PostgreSQL
      run: |
        until pg_isready -h localhost -p 5433 -U test_user; do
          echo "等待 PostgreSQL 启动..."
          sleep 2
        done

    - name: Wait for Redis
      run: |
        until redis-cli -h localhost -p 6380 ping; do
          echo "等待 Redis 启动..."
          sleep 2
        done

    - name: Run integration tests
      env:
        TEST_DB_DSN: postgres://test_user:test_password@localhost:5433/casbinx_test?sslmode=disable
        TEST_REDIS_ADDR: localhost:6380
        TEST_REDIS_PASSWORD: ""
        TEST_REDIS_DB: 0
        TEST_REDIS_CHANNEL: casbinx_test_channel
      run: go test -v -race -coverprofile=coverage.out ./tests/integration/...

    - name: Generate coverage report
      run: go tool cover -html=coverage.out -o coverage.html

    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: integration-coverage-report
        path: |
          coverage.out
          coverage.html

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: integration
        name: codecov-integration

  # 多平台构建测试
  build-test:
    name: Build Test
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
        exclude:
          # Windows 不支持 arm64
          - goos: windows
            goarch: arm64
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Build for ${{ matrix.goos }}/${{ matrix.goarch }}
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: go build ./...

  # 性能测试（可选，仅在主分支运行）
  benchmark:
    name: Benchmark
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: integration-tests

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: casbinx_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6380:6379

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Download dependencies
      run: go mod download

    - name: Wait for PostgreSQL
      run: |
        until pg_isready -h localhost -p 5433 -U test_user; do
          echo "等待 PostgreSQL 启动..."
          sleep 2
        done

    - name: Wait for Redis
      run: |
        until redis-cli -h localhost -p 6380 ping; do
          echo "等待 Redis 启动..."
          sleep 2
        done

    - name: Run benchmarks
      env:
        TEST_DB_DSN: postgres://test_user:test_password@localhost:5433/casbinx_test?sslmode=disable
        TEST_REDIS_ADDR: localhost:6380
      run: go test -bench=. -benchmem ./tests/integration/... | tee benchmark.txt

    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: benchmark.txt

  # 安全扫描
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: './...'

    - name: Run govulncheck
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./...

  # 依赖检查
  dependency-check:
    name: Dependency Check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Check for outdated dependencies
      run: |
        go list -u -m all | grep -v "indirect"

    - name: Verify dependencies
      run: go mod verify

    - name: Check for unused dependencies
      run: |
        go install github.com/golang/mod/mod@latest
        go mod tidy
        if [ -n "$(git status --porcelain go.mod go.sum)" ]; then
          echo "发现未使用的依赖或缺失的依赖"
          git diff go.mod go.sum
          exit 1
        fi

  # 汇总结果
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    if: always()
    needs: [lint, integration-tests, build-test]
    steps:
    - name: Check test results
      run: |
        echo "测试结果汇总:"
        echo "代码质量检查: ${{ needs.lint.result }}"
        echo "集成测试: ${{ needs.integration-tests.result }}"
        echo "构建测试: ${{ needs.build-test.result }}"

        if [[ "${{ needs.lint.result }}" == "failure" || "${{ needs.integration-tests.result }}" == "failure" || "${{ needs.build-test.result }}" == "failure" ]]; then
          echo "❌ 测试失败"
          exit 1
        else
          echo "✅ 所有测试通过"
        fi